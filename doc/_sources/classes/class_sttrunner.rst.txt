.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the doc/base/classes.xml source instead.

.. _class_STTRunner:

STTRunner
=========

**Inherits:** :ref:`Node<class_node>` **<** :ref:`Object<class_object>`

**Category:** Core

Brief Description
-----------------

Uses STT (Speech to Text) to identify keywords spoken by the user.

Member Functions
----------------

+------------------------------+----------------------------------------------------------------------------------------------------------+
| :ref:`Object<class_object>`  | :ref:`get_config<class_STTRunner_get_config>`  **(** **)** const                                         |
+------------------------------+----------------------------------------------------------------------------------------------------------+
| :ref:`Object<class_object>`  | :ref:`get_queue<class_STTRunner_get_queue>`  **(** **)** const                                           |
+------------------------------+----------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`        | :ref:`get_rec_buffer_size<class_STTRunner_get_rec_buffer_size>`  **(** **)**                             |
+------------------------------+----------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`        | :ref:`get_run_error<class_STTRunner_get_run_error>`  **(** **)**                                         |
+------------------------------+----------------------------------------------------------------------------------------------------------+
| void                         | :ref:`reset_run_error<class_STTRunner_reset_run_error>`  **(** **)**                                     |
+------------------------------+----------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`      | :ref:`running<class_STTRunner_running>`  **(** **)**                                                     |
+------------------------------+----------------------------------------------------------------------------------------------------------+
| void                         | :ref:`set_config<class_STTRunner_set_config>`  **(** :ref:`Object<class_object>` stt_config  **)**       |
+------------------------------+----------------------------------------------------------------------------------------------------------+
| void                         | :ref:`set_queue<class_STTRunner_set_queue>`  **(** :ref:`Object<class_object>` stt_queue  **)**          |
+------------------------------+----------------------------------------------------------------------------------------------------------+
| void                         | :ref:`set_rec_buffer_size<class_STTRunner_set_rec_buffer_size>`  **(** :ref:`int<class_int>` size  **)** |
+------------------------------+----------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`        | :ref:`start<class_STTRunner_start>`  **(** **)**                                                         |
+------------------------------+----------------------------------------------------------------------------------------------------------+
| void                         | :ref:`stop<class_STTRunner_stop>`  **(** **)**                                                           |
+------------------------------+----------------------------------------------------------------------------------------------------------+

Numeric Constants
-----------------

- **DEFAULT_REC_BUFFER_SIZE** = **2048** --- Microphone recorder default buffer size.

Description
-----------

Responsible for running speech recognition itself, identifying keywords spoken by the user.

Member Function Description
---------------------------

.. _class_STTRunner_get_config:

- :ref:`Object<class_object>`  **get_config**  **(** **)** const

Returns the :ref:`STTConfig<class_sttconfig>` object containing recognition variables, or ``null`` if not previously set.

.. _class_STTRunner_get_queue:

- :ref:`Object<class_object>`  **get_queue**  **(** **)** const

Returns the :ref:`STTQueue<class_sttqueue>` that stores recognized keywords, or ``null`` if not previously set.

.. _class_STTRunner_get_rec_buffer_size:

- :ref:`int<class_int>`  **get_rec_buffer_size**  **(** **)**

Returns the microphone recorder buffer size used for speech recognition.

.. _class_STTRunner_get_run_error:

- :ref:`int<class_int>`  **get_run_error**  **(** **)**

Returns the :ref:`STTError<class_stterror>` value that depicts how the previously running speech recognition thread has ended. It can be one of the following values:

- ``OK``

- ``REC_START_ERR``

- ``REC_STOP_ERR``

- ``UTT_START_ERR``

- ``UTT_RESTART_ERR``

- ``AUDIO_READ_ERR``



If no thread was previously run, returns ``OK``.

.. _class_STTRunner_reset_run_error:

- void  **reset_run_error**  **(** **)**

Resets the :ref:`STTError<class_stterror>` value that depicts how the previously running speech recognition thread has ended, setting its value to ``OK``.

.. _class_STTRunner_running:

- :ref:`bool<class_bool>`  **running**  **(** **)**

Returns ``true`` if the speech recognition thread is active, or ``false`` otherwise.

.. _class_STTRunner_set_config:

- void  **set_config**  **(** :ref:`Object<class_object>` stt_config  **)**

Sets the :ref:`STTConfig<class_sttconfig>` object containing recognition variables. If the speech recognition thread is currently running, it will be stopped.

.. _class_STTRunner_set_queue:

- void  **set_queue**  **(** :ref:`Object<class_object>` stt_queue  **)**

Sets the :ref:`STTQueue<class_sttqueue>` that stores recognized keywords. If the speech recognition thread is already running, it will be stopped.

.. _class_STTRunner_set_rec_buffer_size:

- void  **set_rec_buffer_size**  **(** :ref:`int<class_int>` size  **)**

Sets the microphone recorder buffer size used for speech recognition as the specified value. Must be > 0. If the speech recognition thread is currently running, it will be stopped.

.. _class_STTRunner_start:

- :ref:`int<class_int>`  **start**  **(** **)**

Creates a thread to repeatedly listen to keywords. The thread can be stopped with :ref:`stop<class_STTRunner_stop>`. If :ref:`start<class_STTRunner_start>` was previously called, the current thread is halted and a new recognition, with the specified arguments, is created.



Returns one of the following :ref:`STTError<class_stterror>` values:

- ``OK``

- ``UNDEF_CONFIG_ERR``

- ``UNDEF_QUEUE_ERR``



**Note:** To check for an error that occurred and stopped the thread, see :ref:`get_last_error<class_STTRunner_get_last_error>`.

.. _class_STTRunner_stop:

- void  **stop**  **(** **)**

Stops the thread currently doing speech recognition. If :ref:`start<class_STTRunner_start>` wasn't called previously, this function does nothing.


