.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the doc/base/classes.xml source instead.

.. _class_RegEx:

RegEx
=====

**Inherits:** :ref:`Reference<class_reference>` **<** :ref:`Object<class_object>`

**Category:** Core

Brief Description
-----------------

Simple regular expression matcher.

Member Functions
----------------

+--------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| void                                 | :ref:`clear<class_RegEx_clear>`  **(** **)**                                                                                                                                                                                       |
+--------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                | :ref:`compile<class_RegEx_compile>`  **(** :ref:`String<class_string>` pattern  **)**                                                                                                                                              |
+--------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                | :ref:`get_group_count<class_RegEx_get_group_count>`  **(** **)** const                                                                                                                                                             |
+--------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_array>`            | :ref:`get_names<class_RegEx_get_names>`  **(** **)** const                                                                                                                                                                         |
+--------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_string>`          | :ref:`get_pattern<class_RegEx_get_pattern>`  **(** **)** const                                                                                                                                                                     |
+--------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`              | :ref:`is_valid<class_RegEx_is_valid>`  **(** **)** const                                                                                                                                                                           |
+--------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`RegExMatch<class_regexmatch>`  | :ref:`search<class_RegEx_search>`  **(** :ref:`String<class_string>` subject, :ref:`int<class_int>` offset=0, :ref:`int<class_int>` end=null  **)** const                                                                          |
+--------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_string>`          | :ref:`sub<class_RegEx_sub>`  **(** :ref:`String<class_string>` subject, :ref:`String<class_string>` replacement, :ref:`bool<class_bool>` all=false, :ref:`int<class_int>` offset=null, :ref:`int<class_int>` end=null  **)** const |
+--------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

Description
-----------

Class for finding text patterns in a string using regular expressions. It can not perform replacements. Regular expressions are a way to define patterns of text to be searched. Details on writing patterns are too long to explain here but the Internet is full of tutorials and detailed explanations.

Once created, the RegEx object needs to be compiled with the pattern before it can be used. The pattern must be escaped first for gdscript before it is escaped for the expression. For example:

``var exp = RegEx.new()``

``exp.compile("\\d+")``

would be read by RegEx as ``\d+``

Similarly:

``exp.compile("\"(?:\\\\.|[^\"])\*\"")``

would be read as ``"(?:\\.|[^"])\*"``

Currently supported features:

\* Capturing ``()`` and non-capturing ``(?:)`` groups

\* Named capturing groups ``(?P<name>)``

\* Any character ``.``

\* Shorthand character classes ``\w \W \s \S \d \D``

\* User-defined character classes such as ``[A-Za-z]``

\* Simple quantifiers ``?``, ``\*`` and ``+``

\* Range quantifiers ``{x,y}``

\* Lazy (non-greedy) quantifiers ``\*?``

\* Beginning ``^`` and end ``$`` anchors

\* Alternation ``|``

\* Backreferences ``\1``, ``\g{1}``, and ``\g<name>``

\* POSIX character classes ``[[:alnum:]]``

\* Lookahead ``(?=)``, ``(?!)`` and lookbehind ``(?<=)``, ``(?<!)``

\* ASCII ``\xFF`` and Unicode ``\uFFFF`` code points (in a style similar to Python)

\* Word boundaries ``\b``, ``\B``

Member Function Description
---------------------------

.. _class_RegEx_clear:

- void  **clear**  **(** **)**

This method resets the state of the object, as it was freshly created. Namely, it unassigns the regular expression of this object.

.. _class_RegEx_compile:

- :ref:`int<class_int>`  **compile**  **(** :ref:`String<class_string>` pattern  **)**

Compiles and assign the regular expression pattern to use.

.. _class_RegEx_get_group_count:

- :ref:`int<class_int>`  **get_group_count**  **(** **)** const

Returns the number of numeric capturing groups.

.. _class_RegEx_get_names:

- :ref:`Array<class_array>`  **get_names**  **(** **)** const

Returns an array of names of named capturing groups.

.. _class_RegEx_get_pattern:

- :ref:`String<class_string>`  **get_pattern**  **(** **)** const

Returns the expression used to compile the code.

.. _class_RegEx_is_valid:

- :ref:`bool<class_bool>`  **is_valid**  **(** **)** const

Returns whether this object has a valid regular expression assigned.

.. _class_RegEx_search:

- :ref:`RegExMatch<class_regexmatch>`  **search**  **(** :ref:`String<class_string>` subject, :ref:`int<class_int>` offset=0, :ref:`int<class_int>` end=null  **)** const

Searches the text for the compiled pattern. Returns a :ref:`RegExMatch<class_regexmatch>` container of the first matching reult if found, otherwise null. The region to search within can be specified without modifying where the start and end anchor would be.

.. _class_RegEx_sub:

- :ref:`String<class_string>`  **sub**  **(** :ref:`String<class_string>` subject, :ref:`String<class_string>` replacement, :ref:`bool<class_bool>` all=false, :ref:`int<class_int>` offset=null, :ref:`int<class_int>` end=null  **)** const

Searches the text for the compiled pattern and replaces it with the specified string. Escapes and backreferences such as ``\1`` and ``\g<name>`` expanded and resolved. By default only the first instance is replaced but it can be changed for all instances (global replacement). The region to search within can be specified without modifying where the start and end anchor would be.


