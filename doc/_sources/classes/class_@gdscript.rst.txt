.. Generated automatically by doc/tools/makerst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the doc/base/classes.xml source instead.

.. _class_@GDScript:

@GDScript
=========

**Category:** Core

Brief Description
-----------------

Built-in GDScript functions.

Member Functions
----------------

+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Color<class_color>`                      | :ref:`Color8<class_@GDScript_Color8>`  **(** :ref:`int<class_int>` r8, :ref:`int<class_int>` g8, :ref:`int<class_int>` b8, :ref:`int<class_int>` a8  **)** |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Color<class_color>`                      | :ref:`ColorN<class_@GDScript_ColorN>`  **(** :ref:`String<class_string>` name, :ref:`float<class_float>` alpha  **)**                                      |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`abs<class_@GDScript_abs>`  **(** :ref:`float<class_float>` s  **)**                                                                                  |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`acos<class_@GDScript_acos>`  **(** :ref:`float<class_float>` s  **)**                                                                                |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`asin<class_@GDScript_asin>`  **(** :ref:`float<class_float>` s  **)**                                                                                |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Nil<class_nil>`                          | :ref:`assert<class_@GDScript_assert>`  **(** :ref:`bool<class_bool>` condition  **)**                                                                      |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`atan<class_@GDScript_atan>`  **(** :ref:`float<class_float>` s  **)**                                                                                |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`atan2<class_@GDScript_atan2>`  **(** :ref:`float<class_float>` x, :ref:`float<class_float>` y  **)**                                                 |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_variant>`                  | :ref:`bytes2var<class_@GDScript_bytes2var>`  **(** :ref:`RawArray<class_rawarray>` bytes  **)**                                                            |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`ceil<class_@GDScript_ceil>`  **(** :ref:`float<class_float>` s  **)**                                                                                |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`clamp<class_@GDScript_clamp>`  **(** :ref:`float<class_float>` val, :ref:`float<class_float>` min, :ref:`float<class_float>` max  **)**              |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Object<class_object>`                    | :ref:`convert<class_@GDScript_convert>`  **(** :ref:`Variant<class_variant>` what, :ref:`int<class_int>` type  **)**                                       |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`cos<class_@GDScript_cos>`  **(** :ref:`float<class_float>` s  **)**                                                                                  |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`cosh<class_@GDScript_cosh>`  **(** :ref:`float<class_float>` s  **)**                                                                                |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`db2linear<class_@GDScript_db2linear>`  **(** :ref:`float<class_float>` db  **)**                                                                     |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`decimals<class_@GDScript_decimals>`  **(** :ref:`float<class_float>` step  **)**                                                                     |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`dectime<class_@GDScript_dectime>`  **(** :ref:`float<class_float>` value, :ref:`float<class_float>` amount, :ref:`float<class_float>` step  **)**    |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`deg2rad<class_@GDScript_deg2rad>`  **(** :ref:`float<class_float>` deg  **)**                                                                        |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Object<class_object>`                    | :ref:`dict2inst<class_@GDScript_dict2inst>`  **(** :ref:`Dictionary<class_dictionary>` dict  **)**                                                         |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`ease<class_@GDScript_ease>`  **(** :ref:`float<class_float>` s, :ref:`float<class_float>` curve  **)**                                               |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`exp<class_@GDScript_exp>`  **(** :ref:`float<class_float>` s  **)**                                                                                  |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`floor<class_@GDScript_floor>`  **(** :ref:`float<class_float>` s  **)**                                                                              |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`fmod<class_@GDScript_fmod>`  **(** :ref:`float<class_float>` x, :ref:`float<class_float>` y  **)**                                                   |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`fposmod<class_@GDScript_fposmod>`  **(** :ref:`float<class_float>` x, :ref:`float<class_float>` y  **)**                                             |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`FuncRef<class_funcref>`                  | :ref:`funcref<class_@GDScript_funcref>`  **(** :ref:`Object<class_object>` instance, :ref:`String<class_string>` funcname  **)**                           |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                          | :ref:`hash<class_@GDScript_hash>`  **(** :ref:`Variant<class_variant>` var:Variant  **)**                                                                  |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Dictionary<class_dictionary>`            | :ref:`inst2dict<class_@GDScript_inst2dict>`  **(** :ref:`Object<class_object>` inst  **)**                                                                 |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Object<class_object>`                    | :ref:`instance_from_id<class_@GDScript_instance_from_id>`  **(** :ref:`int<class_int>` instance_id  **)**                                                  |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`is_inf<class_@GDScript_is_inf>`  **(** :ref:`float<class_float>` s  **)**                                                                            |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`is_nan<class_@GDScript_is_nan>`  **(** :ref:`float<class_float>` s  **)**                                                                            |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`lerp<class_@GDScript_lerp>`  **(** :ref:`float<class_float>` from, :ref:`float<class_float>` to, :ref:`float<class_float>` weight  **)**             |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`linear2db<class_@GDScript_linear2db>`  **(** :ref:`float<class_float>` nrg  **)**                                                                    |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Resource<class_resource>`                | :ref:`load<class_@GDScript_load>`  **(** :ref:`String<class_string>` path  **)**                                                                           |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`log<class_@GDScript_log>`  **(** :ref:`float<class_float>` s  **)**                                                                                  |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`max<class_@GDScript_max>`  **(** :ref:`float<class_float>` a, :ref:`float<class_float>` b  **)**                                                     |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`min<class_@GDScript_min>`  **(** :ref:`float<class_float>` a, :ref:`float<class_float>` b  **)**                                                     |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                          | :ref:`nearest_po2<class_@GDScript_nearest_po2>`  **(** :ref:`int<class_int>` val  **)**                                                                    |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`pow<class_@GDScript_pow>`  **(** :ref:`float<class_float>` x, :ref:`float<class_float>` y  **)**                                                     |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Resource<class_resource>`                | :ref:`preload<class_@GDScript_preload>`  **(** :ref:`String<class_string>` path  **)**                                                                     |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Nil<class_nil>`                          | :ref:`print<class_@GDScript_print>`  **(** :ref:`Variant<class_variant>` what, :ref:`Variant<class_variant>` ...  **)**                                    |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Nil<class_nil>`                          | :ref:`print_stack<class_@GDScript_print_stack>`  **(** **)**                                                                                               |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Nil<class_nil>`                          | :ref:`printerr<class_@GDScript_printerr>`  **(** :ref:`Variant<class_variant>` what, :ref:`Variant<class_variant>` ...  **)**                              |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Nil<class_nil>`                          | :ref:`printraw<class_@GDScript_printraw>`  **(** :ref:`Variant<class_variant>` what, :ref:`Variant<class_variant>` ...  **)**                              |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Nil<class_nil>`                          | :ref:`prints<class_@GDScript_prints>`  **(** :ref:`Variant<class_variant>` what, :ref:`Variant<class_variant>` ...  **)**                                  |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Nil<class_nil>`                          | :ref:`printt<class_@GDScript_printt>`  **(** :ref:`Variant<class_variant>` what, :ref:`Variant<class_variant>` ...  **)**                                  |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`rad2deg<class_@GDScript_rad2deg>`  **(** :ref:`float<class_float>` rad  **)**                                                                        |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`rand_range<class_@GDScript_rand_range>`  **(** :ref:`float<class_float>` from, :ref:`float<class_float>` to  **)**                                   |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_array>`                      | :ref:`rand_seed<class_@GDScript_rand_seed>`  **(** :ref:`int<class_int>` seed  **)**                                                                       |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`randf<class_@GDScript_randf>`  **(** **)**                                                                                                           |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                          | :ref:`randi<class_@GDScript_randi>`  **(** **)**                                                                                                           |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Nil<class_nil>`                          | :ref:`randomize<class_@GDScript_randomize>`  **(** **)**                                                                                                   |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Array<class_array>`                      | :ref:`range<class_@GDScript_range>`  **(** :ref:`Variant<class_variant>` ...  **)**                                                                        |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`round<class_@GDScript_round>`  **(** :ref:`float<class_float>` s  **)**                                                                              |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Nil<class_nil>`                          | :ref:`seed<class_@GDScript_seed>`  **(** :ref:`int<class_int>` seed  **)**                                                                                 |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`sign<class_@GDScript_sign>`  **(** :ref:`float<class_float>` s  **)**                                                                                |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`sin<class_@GDScript_sin>`  **(** :ref:`float<class_float>` s  **)**                                                                                  |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`sinh<class_@GDScript_sinh>`  **(** :ref:`float<class_float>` s  **)**                                                                                |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`sqrt<class_@GDScript_sqrt>`  **(** :ref:`float<class_float>` s  **)**                                                                                |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`stepify<class_@GDScript_stepify>`  **(** :ref:`float<class_float>` s, :ref:`float<class_float>` step  **)**                                          |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_string>`                    | :ref:`str<class_@GDScript_str>`  **(** :ref:`Variant<class_variant>` what, :ref:`Variant<class_variant>` ...  **)**                                        |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`Variant<class_variant>`                  | :ref:`str2var<class_@GDScript_str2var>`  **(** :ref:`String<class_string>` string  **)**                                                                   |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`tan<class_@GDScript_tan>`  **(** :ref:`float<class_float>` s  **)**                                                                                  |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`float<class_float>`                      | :ref:`tanh<class_@GDScript_tanh>`  **(** :ref:`float<class_float>` s  **)**                                                                                |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`bool<class_bool>`                        | :ref:`type_exists<class_@GDScript_type_exists>`  **(** :ref:`String<class_string>` type  **)**                                                             |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`int<class_int>`                          | :ref:`typeof<class_@GDScript_typeof>`  **(** :ref:`Variant<class_variant>` what  **)**                                                                     |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`RawArray<class_rawarray>`                | :ref:`var2bytes<class_@GDScript_var2bytes>`  **(** :ref:`Variant<class_variant>` var  **)**                                                                |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`String<class_string>`                    | :ref:`var2str<class_@GDScript_var2str>`  **(** :ref:`Variant<class_variant>` var  **)**                                                                    |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`WeakRef<class_weakref>`                  | :ref:`weakref<class_@GDScript_weakref>`  **(** :ref:`Object<class_object>` obj  **)**                                                                      |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :ref:`GDFunctionState<class_gdfunctionstate>`  | :ref:`yield<class_@GDScript_yield>`  **(** :ref:`Object<class_object>` object, :ref:`String<class_string>` signal  **)**                                   |
+------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+

Numeric Constants
-----------------

- **PI** = **3.141593** --- Constant that represents how many times the diameter of a circumference fits around its perimeter.

Description
-----------

This contains the list of built-in gdscript functions. Mostly math functions and other utilities. Everything else is expanded by objects.

Member Function Description
---------------------------

.. _class_@GDScript_Color8:

- :ref:`Color<class_color>`  **Color8**  **(** :ref:`int<class_int>` r8, :ref:`int<class_int>` g8, :ref:`int<class_int>` b8, :ref:`int<class_int>` a8  **)**

Make a color from red, green, blue and alpha. Arguments can range from 0 to 255.

.. _class_@GDScript_ColorN:

- :ref:`Color<class_color>`  **ColorN**  **(** :ref:`String<class_string>` name, :ref:`float<class_float>` alpha  **)**

.. _class_@GDScript_abs:

- :ref:`float<class_float>`  **abs**  **(** :ref:`float<class_float>` s  **)**

Returns the absolute value of parameter s  (i.e. unsigned value, works for integer and float).

.. _class_@GDScript_acos:

- :ref:`float<class_float>`  **acos**  **(** :ref:`float<class_float>` s  **)**

Returns the principal value of the arc cosine of s, expressed in radians. In trigonometrics, arc cosine is the inverse operation of cosine.

.. _class_@GDScript_asin:

- :ref:`float<class_float>`  **asin**  **(** :ref:`float<class_float>` s  **)**

Returns the principal value of the arc sine of s, expressed in radians. In trigonometrics, arc sine is the inverse operation of sine.

.. _class_@GDScript_assert:

- void  **assert**  **(** :ref:`bool<class_bool>` condition  **)**

Assert that the condition is true. If the condition is false, generates an error.

.. _class_@GDScript_atan:

- :ref:`float<class_float>`  **atan**  **(** :ref:`float<class_float>` s  **)**

Returns the principal value of the arc tangent of s, expressed in radians. In trigonometrics, arc tangent is the inverse operation of tangent. Notice that because of the sign ambiguity, the function cannot determine with certainty in which quadrant the angle falls only by its tangent value. See :ref:`atan2<class_@GDScript_atan2>` for an alternative that takes a fractional argument instead.

.. _class_@GDScript_atan2:

- :ref:`float<class_float>`  **atan2**  **(** :ref:`float<class_float>` x, :ref:`float<class_float>` y  **)**

Returns the principal value of the arc tangent of y/x, expressed in radians. To compute the value, the function takes into account the sign of both arguments in order to determine the quadrant.

.. _class_@GDScript_bytes2var:

- :ref:`Variant<class_variant>`  **bytes2var**  **(** :ref:`PoolByteArray<class_poolbytearray>` bytes  **)**

Decode a byte array back to a value.

.. _class_@GDScript_ceil:

- :ref:`float<class_float>`  **ceil**  **(** :ref:`float<class_float>` s  **)**

Rounds s upward, returning the smallest integral value that is not less than s.

.. _class_@GDScript_char:

- :ref:`String<class_string>`  **char**  **(** :ref:`int<class_int>` ascii  **)**

.. _class_@GDScript_clamp:

- :ref:`float<class_float>`  **clamp**  **(** :ref:`float<class_float>` val, :ref:`float<class_float>` min, :ref:`float<class_float>` max  **)**

Clamps a value between a minimum and maximum value.

.. _class_@GDScript_convert:

- :ref:`Object<class_object>`  **convert**  **(** :ref:`Variant<class_variant>` what, :ref:`int<class_int>` type  **)**

Convert from a type to another in the best way possible. The "type" parameter uses the enum TYPE\_\* in :ref:`@Global Scope<class_@global scope>`.

.. _class_@GDScript_cos:

- :ref:`float<class_float>`  **cos**  **(** :ref:`float<class_float>` s  **)**

Returns the cosine of an angle of s radians.

.. _class_@GDScript_cosh:

- :ref:`float<class_float>`  **cosh**  **(** :ref:`float<class_float>` s  **)**

Returns the hyperbolic cosine of s.

.. _class_@GDScript_db2linear:

- :ref:`float<class_float>`  **db2linear**  **(** :ref:`float<class_float>` db  **)**

Convert from decibels to linear energy (audio).

.. _class_@GDScript_decimals:

- :ref:`float<class_float>`  **decimals**  **(** :ref:`float<class_float>` step  **)**

Return the amount of decimals in the floating point value.

.. _class_@GDScript_dectime:

- :ref:`float<class_float>`  **dectime**  **(** :ref:`float<class_float>` value, :ref:`float<class_float>` amount, :ref:`float<class_float>` step  **)**

Decreases time by a specified amount.

.. _class_@GDScript_deg2rad:

- :ref:`float<class_float>`  **deg2rad**  **(** :ref:`float<class_float>` deg  **)**

Convert from degrees to radians.

.. _class_@GDScript_dict2inst:

- :ref:`Object<class_object>`  **dict2inst**  **(** :ref:`Dictionary<class_dictionary>` dict  **)**

Convert a previously converted instances to dictionary back into an instance. Useful for deserializing.

.. _class_@GDScript_ease:

- :ref:`float<class_float>`  **ease**  **(** :ref:`float<class_float>` s, :ref:`float<class_float>` curve  **)**

Easing function, based on exponent. 0 is constant, 1 is linear, 0 to 1 is ease-in, 1+ is ease out. Negative values are in-out/out in.

.. _class_@GDScript_exp:

- :ref:`float<class_float>`  **exp**  **(** :ref:`float<class_float>` s  **)**

Returns the base-e exponential function of s, which is e raised to the power s: e^s.

.. _class_@GDScript_floor:

- :ref:`float<class_float>`  **floor**  **(** :ref:`float<class_float>` s  **)**

Rounds s downward, returning the largest integral value that is not greater than s.

.. _class_@GDScript_fmod:

- :ref:`float<class_float>`  **fmod**  **(** :ref:`float<class_float>` x, :ref:`float<class_float>` y  **)**

Returns the floating-point remainder of x/y (rounded towards zero):

::

    fmod = x - tquot \* y

Where tquot is the truncated (i.e., rounded towards zero) result of: x/y.

.. _class_@GDScript_fposmod:

- :ref:`float<class_float>`  **fposmod**  **(** :ref:`float<class_float>` x, :ref:`float<class_float>` y  **)**

Module (remainder of x/y) that wraps equally in positive and negative.

.. _class_@GDScript_funcref:

- :ref:`Object<class_object>`  **funcref**  **(** :ref:`Object<class_object>` instance, :ref:`String<class_string>` funcname  **)**

Return a reference to the specified function.

.. _class_@GDScript_hash:

- :ref:`int<class_int>`  **hash**  **(** :ref:`Variant<class_variant>` var  **)**

Hash the variable passed and return an integer.

.. _class_@GDScript_inst2dict:

- :ref:`Dictionary<class_dictionary>`  **inst2dict**  **(** :ref:`Object<class_object>` inst  **)**

Convert a script class instance to a dictionary (useful for serializing).

.. _class_@GDScript_instance_from_id:

- :ref:`Object<class_object>`  **instance_from_id**  **(** :ref:`int<class_int>` instance_id  **)**

Get an object by its ID.

.. _class_@GDScript_inverse_lerp:

- :ref:`float<class_float>`  **inverse_lerp**  **(** :ref:`float<class_float>` from, :ref:`float<class_float>` to, :ref:`float<class_float>` value  **)**

.. _class_@GDScript_is_inf:

- :ref:`float<class_float>`  **is_inf**  **(** :ref:`float<class_float>` s  **)**

Returns whether s is an infinity value (either positive infinity or negative infinity).

.. _class_@GDScript_is_nan:

- :ref:`float<class_float>`  **is_nan**  **(** :ref:`float<class_float>` s  **)**

Returns whether s is a NaN (Not-A-Number) value.

.. _class_@GDScript_len:

- :ref:`int<class_int>`  **len**  **(** :ref:`Variant<class_variant>` var  **)**

.. _class_@GDScript_lerp:

- :ref:`float<class_float>`  **lerp**  **(** :ref:`float<class_float>` from, :ref:`float<class_float>` to, :ref:`float<class_float>` weight  **)**

Linear interpolates between two values by a normalized value.

.. _class_@GDScript_linear2db:

- :ref:`float<class_float>`  **linear2db**  **(** :ref:`float<class_float>` nrg  **)**

Convert from linear energy to decibels (audio).

.. _class_@GDScript_load:

- :ref:`Object<class_object>`  **load**  **(** :ref:`String<class_string>` path  **)**

Load a resource from the filesystem, pass a valid path as argument.

.. _class_@GDScript_log:

- :ref:`float<class_float>`  **log**  **(** :ref:`float<class_float>` s  **)**

Natural logarithm.

.. _class_@GDScript_max:

- :ref:`float<class_float>`  **max**  **(** :ref:`float<class_float>` a, :ref:`float<class_float>` b  **)**

Return the maximum of two values.

.. _class_@GDScript_min:

- :ref:`float<class_float>`  **min**  **(** :ref:`float<class_float>` a, :ref:`float<class_float>` b  **)**

Return the minimum of two values.

.. _class_@GDScript_nearest_po2:

- :ref:`int<class_int>`  **nearest_po2**  **(** :ref:`int<class_int>` val  **)**

Return the nearest larger power of 2 for an integer.

.. _class_@GDScript_parse_json:

- :ref:`Variant<class_variant>`  **parse_json**  **(** :ref:`String<class_string>` json  **)**

Parse JSON text to a Variant (use :ref:`typeof<class_@GDScript_typeof>` to check if it is what you expect).

Be aware that the JSON specification does not define integer or float types, but only a number type. Therefore, parsing a JSON text will convert every numerical values to :ref:`float<class_float>` types.

.. _class_@GDScript_pow:

- :ref:`float<class_float>`  **pow**  **(** :ref:`float<class_float>` x, :ref:`float<class_float>` y  **)**

Power function, x elevate to y.

.. _class_@GDScript_preload:

- :ref:`Resource<class_resource>`  **preload**  **(** :ref:`String<class_string>` path  **)**

Preload a resource from the filesystem. The resource is loaded during script parsing.

.. _class_@GDScript_print:

- void  **print**  **(** **)** vararg

Print one or more arguments to strings in the best way possible to a console line.

.. _class_@GDScript_print_stack:

- void  **print_stack**  **(** **)**

Print a stack track at code location, only works when running with debugger turned on.

.. _class_@GDScript_printerr:

- void  **printerr**  **(** **)** vararg

Print one or more arguments to strings in the best way possible to standard error line.

.. _class_@GDScript_printraw:

- void  **printraw**  **(** **)** vararg

Print one or more arguments to strings in the best way possible to console. No newline is added at the end.

.. _class_@GDScript_prints:

- void  **prints**  **(** **)** vararg

Print one or more arguments to the console with a space between each argument.

.. _class_@GDScript_printt:

- void  **printt**  **(** **)** vararg

Print one or more arguments to the console with a tab between each argument.

.. _class_@GDScript_rad2deg:

- :ref:`float<class_float>`  **rad2deg**  **(** :ref:`float<class_float>` rad  **)**

Convert from radians to degrees.

.. _class_@GDScript_rand_range:

- :ref:`float<class_float>`  **rand_range**  **(** :ref:`float<class_float>` from, :ref:`float<class_float>` to  **)**

Random range, any floating point value between 'from' and 'to'.

.. _class_@GDScript_rand_seed:

- :ref:`Array<class_array>`  **rand_seed**  **(** :ref:`int<class_int>` seed  **)**

Random from seed: pass a seed, and an array with both number and new seed is returned. "Seed" here refers to the internal state of the pseudo random number generator. The internal state of the current implementation is 64 bits.

.. _class_@GDScript_randf:

- :ref:`float<class_float>`  **randf**  **(** **)**

Return a random floating point value between 0 and 1.

.. _class_@GDScript_randi:

- :ref:`int<class_int>`  **randi**  **(** **)**

Return a random 32 bits integer value. To obtain a random value between 0 to N (where N is smaller than 2^32 - 1), you can use remainder. For example, to get a random integer between 0 and 19 inclusive, you can use randi() % 20.

.. _class_@GDScript_randomize:

- void  **randomize**  **(** **)**

Randomize the seed (or the internal state) of the random number generator. Current implementation reseeds using a number based on time.

.. _class_@GDScript_range:

- :ref:`Array<class_array>`  **range**  **(** **)** vararg

Return an array with the given range. Range can be 1 argument N (0 to N-1), two arguments (initial, final-1) or three arguments (initial, final-1, increment).

.. _class_@GDScript_range_lerp:

- :ref:`float<class_float>`  **range_lerp**  **(** :ref:`float<class_float>` value, :ref:`float<class_float>` istart, :ref:`float<class_float>` istop, :ref:`float<class_float>` ostart, :ref:`float<class_float>` ostop  **)**

.. _class_@GDScript_round:

- :ref:`float<class_float>`  **round**  **(** :ref:`float<class_float>` s  **)**

Returns the integral value that is nearest to s, with halfway cases rounded away from zero.

.. _class_@GDScript_seed:

- void  **seed**  **(** :ref:`int<class_int>` seed  **)**

Set seed for the random number generator.

.. _class_@GDScript_sign:

- :ref:`float<class_float>`  **sign**  **(** :ref:`float<class_float>` s  **)**

Return sign (-1 or +1).

.. _class_@GDScript_sin:

- :ref:`float<class_float>`  **sin**  **(** :ref:`float<class_float>` s  **)**

Returns the sine of an angle of s radians.

.. _class_@GDScript_sinh:

- :ref:`float<class_float>`  **sinh**  **(** :ref:`float<class_float>` s  **)**

Returns the hyperbolic sine of s.

.. _class_@GDScript_sqrt:

- :ref:`float<class_float>`  **sqrt**  **(** :ref:`float<class_float>` s  **)**

Returns the square root of s.

.. _class_@GDScript_stepify:

- :ref:`float<class_float>`  **stepify**  **(** :ref:`float<class_float>` s, :ref:`float<class_float>` step  **)**

Snap float value to a given step.

.. _class_@GDScript_str:

- :ref:`String<class_string>`  **str**  **(** **)** vararg

Convert one or more arguments to string in the best way possible.

.. _class_@GDScript_str2var:

- :ref:`Variant<class_variant>`  **str2var**  **(** :ref:`String<class_string>` string  **)**

Convert a formatted string that was returned by :ref:`var2str<class_@GDScript_var2str>` to the original value.

.. _class_@GDScript_tan:

- :ref:`float<class_float>`  **tan**  **(** :ref:`float<class_float>` s  **)**

Returns the tangent of an angle of s radians.

.. _class_@GDScript_tanh:

- :ref:`float<class_float>`  **tanh**  **(** :ref:`float<class_float>` s  **)**

Returns the hyperbolic tangent of s.

.. _class_@GDScript_to_json:

- :ref:`String<class_string>`  **to_json**  **(** :ref:`Variant<class_variant>` var  **)**

Convert a Variant to json text.

.. _class_@GDScript_type_exists:

- :ref:`bool<class_bool>`  **type_exists**  **(** :ref:`String<class_string>` type  **)**

.. _class_@GDScript_typeof:

- :ref:`int<class_int>`  **typeof**  **(** :ref:`Variant<class_variant>` what  **)**

Return the internal type of the given Variant object, using the TYPE\_\* enum in :ref:`@Global Scope<class_@global scope>`.

.. _class_@GDScript_validate_json:

- :ref:`String<class_string>`  **validate_json**  **(** :ref:`String<class_string>` json  **)**

This method is used to validate the structure and data types of a piece of JSON, similar to XML Schema for XML.

.. _class_@GDScript_var2bytes:

- :ref:`PoolByteArray<class_poolbytearray>`  **var2bytes**  **(** :ref:`Variant<class_variant>` var  **)**

Encode a variable value to a byte array.

.. _class_@GDScript_var2str:

- :ref:`String<class_string>`  **var2str**  **(** :ref:`Variant<class_variant>` var  **)**

Convert a value to a formatted string that can later be parsed using :ref:`str2var<class_@GDScript_str2var>`.

.. _class_@GDScript_weakref:

- :ref:`Object<class_object>`  **weakref**  **(** :ref:`Object<class_object>` obj  **)**

Return a weak reference to an object.

A weak reference to an object is not enough to keep the object alive: when the only remaining references to a referent are weak references, garbage collection is free to destroy the referent and reuse its memory for something else. However, until the object is actually destroyed the weak reference may return the object even if there are no strong references to it.

.. _class_@GDScript_yield:

- :ref:`GDFunctionState<class_gdfunctionstate>`  **yield**  **(** :ref:`Object<class_object>` object, :ref:`String<class_string>` signal  **)**

Stop the function execution and return the current state. Call :ref:`GDFunctionState.resume<class_GDFunctionState_resume>` on the state to resume execution. This invalidates the state.

Returns anything that was passed to the resume function call. If passed an object and a signal, the execution is resumed when the object's signal is emitted.


